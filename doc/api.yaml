openapi: 3.0.0
paths:
  /user:
    get:
      operationId: UserController_getUsers
      summary: Get all users
      parameters: []
      responses:
        '200':
          description: User found and returned successfully.
      tags: &ref_0
        - user
    post:
      operationId: UserController_createUser
      summary: Create new user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: User created successfully.
        '400':
          description: Body is invalid.
      tags: *ref_0
  /user/{id}:
    get:
      operationId: UserController_getUserById
      summary: Get user by ID
      parameters:
        - name: id
          required: true
          in: path
          description: User ID
          schema:
            type: string
      responses:
        '40':
          description: ID is invalid.
        '200':
          description: User found and returned successfully.
        '404':
          description: User not found.
      tags: *ref_0
    put:
      operationId: UserController_changePassword
      summary: Update user's password
      parameters:
        - name: id
          required: true
          in: path
          description: User ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordDto'
      responses:
        '200':
          description: Password updated successfully.
        '400':
          description: Body is invalid.
        '403':
          description: The old password is wrong.
        '404':
          description: User not found.
      tags: *ref_0
    delete:
      operationId: UserController_deleteUser
      summary: Update user's password
      parameters:
        - name: id
          required: true
          in: path
          description: User ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordDto'
      responses:
        '204':
          description: The user was deleted successfully.
        '400':
          description: ID is invalid.
        '404':
          description: User not found.
      tags: *ref_0
  /artist:
    get:
      operationId: ArtistController_getArtists
      parameters: []
      responses:
        '200':
          description: ''
    post:
      operationId: ArtistController_createArtist
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArtistDto'
      responses:
        '201':
          description: ''
  /artist/{id}:
    get:
      operationId: ArtistController_getArtistById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
    put:
      operationId: ArtistController_changeArtist
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArtistDto'
      responses:
        '200':
          description: ''
    delete:
      operationId: ArtistController_deleteUser
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: ''
  /track:
    get:
      operationId: TrackController_getTracks
      parameters: []
      responses:
        '200':
          description: ''
    post:
      operationId: TrackController_createTrack
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrackDto'
      responses:
        '201':
          description: ''
  /track/{id}:
    get:
      operationId: TrackController_getTrackById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
    put:
      operationId: TrackController_changeTrack
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrackDto'
      responses:
        '200':
          description: ''
    delete:
      operationId: TrackController_deleteUser
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: ''
  /album:
    get:
      operationId: AlbumController_getAlbums
      parameters: []
      responses:
        '200':
          description: ''
    post:
      operationId: AlbumController_createAlbum
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlbumDto'
      responses:
        '201':
          description: ''
  /album/{id}:
    get:
      operationId: AlbumController_getAlbumById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
    put:
      operationId: AlbumController_changeAlbum
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlbumDto'
      responses:
        '200':
          description: ''
    delete:
      operationId: AlbumController_deleteUser
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: ''
  /favs:
    get:
      operationId: FavoritesController_getFavorites
      parameters: []
      responses:
        '200':
          description: ''
  /favs/{instance}/{id}:
    post:
      operationId: FavoritesController_addToFavorites
      parameters:
        - name: instance
          required: true
          in: path
          schema:
            type: string
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: ''
    delete:
      operationId: FavoritesController_deleteFromFavorites
      parameters:
        - name: instance
          required: true
          in: path
          schema:
            type: string
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: ''
info:
  title: API Documentation
  description: API documentation for the application
  version: '1.0'
  contact: {}
tags: []
servers: []
components:
  schemas:
    CreateUserDto:
      type: object
      properties:
        login:
          type: string
          description: The login of the user
          example: testUser
        password:
          type: string
          description: The password of the user
          example: password123
      required:
        - login
        - password
    UpdatePasswordDto:
      type: object
      properties:
        oldPassword:
          type: string
          description: The old user's password
          example: testUser
        newPassword:
          type: string
          description: The new user's password
          example: testUser
      required:
        - oldPassword
        - newPassword
    CreateArtistDto:
      type: object
      properties: {}
    CreateTrackDto:
      type: object
      properties: {}
    CreateAlbumDto:
      type: object
      properties: {}
