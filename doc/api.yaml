openapi: 3.0.0
paths:
  /user:
    get:
      operationId: UserController_getUsers
      summary: Get all users
      parameters: []
      responses:
        '200':
          description: Users returned successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReturnedUserClass'
      tags: &ref_0
        - User instance
    post:
      operationId: UserController_createUser
      summary: Create new user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: User created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReturnedUserClass'
        '400':
          description: Body is invalid.
      tags: *ref_0
  /user/{id}:
    get:
      operationId: UserController_getUserById
      summary: Get user by ID
      parameters:
        - name: id
          required: true
          in: path
          description: User ID
          schema:
            type: string
      responses:
        '200':
          description: User found and returned successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReturnedUserClass'
        '400':
          description: ID is invalid.
        '404':
          description: User not found.
      tags: *ref_0
    put:
      operationId: UserController_changePassword
      summary: Update user's password
      parameters:
        - name: id
          required: true
          in: path
          description: User ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordDto'
      responses:
        '200':
          description: Password updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReturnedUserClass'
        '400':
          description: Body is invalid.
        '403':
          description: The old password is wrong.
        '404':
          description: User not found.
      tags: *ref_0
    delete:
      operationId: UserController_deleteUser
      summary: Update user's password
      parameters:
        - name: id
          required: true
          in: path
          description: User ID
          schema:
            type: string
      responses:
        '204':
          description: The user was deleted successfully.
        '400':
          description: ID is invalid.
        '404':
          description: User not found.
      tags: *ref_0
  /artist:
    get:
      operationId: ArtistController_getArtists
      summary: Get all artists
      parameters: []
      responses:
        '200':
          description: All artists returned successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ArtistClass'
      tags: &ref_1
        - Artist instance
    post:
      operationId: ArtistController_createArtist
      summary: Create a new artist
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArtistDto'
      responses:
        '200':
          description: Artist created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistClass'
        '400':
          description: Body is invalid.
      tags: *ref_1
  /artist/{id}:
    get:
      operationId: ArtistController_getArtistById
      summary: Get artist by ID
      parameters:
        - name: id
          required: true
          in: path
          description: Artist ID
          schema:
            type: string
      responses:
        '200':
          description: Artist found and returned successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistClass'
        '400':
          description: Artist ID is invalid.
        '404':
          description: Artist not found.
      tags: *ref_1
    put:
      operationId: ArtistController_changeArtist
      summary: Change artist data
      parameters:
        - name: id
          required: true
          in: path
          description: Artist ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArtistDto'
      responses:
        '200':
          description: Artist changed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistClass'
        '400':
          description: Artist ID is invalid.
        '404':
          description: Artist not found.
      tags: *ref_1
    delete:
      operationId: ArtistController_deleteUser
      summary: Delete artist
      parameters:
        - name: id
          required: true
          in: path
          description: Artist ID
          schema:
            type: string
      responses:
        '200':
          description: Artist deleted successfully.
        '404':
          description: Artist not found.
      tags: *ref_1
  /track:
    get:
      operationId: TrackController_getTracks
      summary: Get all tracks
      parameters: []
      responses:
        '200':
          description: Track returned successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrackClass'
      tags: &ref_2
        - Track instance
    post:
      operationId: TrackController_createTrack
      summary: Add a new track to the library
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrackDto'
      responses:
        '201':
          description: Track created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackClass'
        '400':
          description: Body is invalid.
      tags: *ref_2
  /track/{id}:
    get:
      operationId: TrackController_getTrackById
      summary: Get track by ID
      parameters:
        - name: id
          required: true
          in: path
          description: Track ID
          schema:
            type: string
      responses:
        '200':
          description: Track found and returned successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackClass'
        '400':
          description: Track ID is invalid.
        '404':
          description: Track not found.
      tags: *ref_2
    put:
      operationId: TrackController_changeTrack
      summary: Change track data
      parameters:
        - name: id
          required: true
          in: path
          description: Track ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrackDto'
      responses:
        '200':
          description: Track changed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackClass'
        '400':
          description: Track ID is invalid.
        '404':
          description: Track not found.
      tags: *ref_2
    delete:
      operationId: TrackController_deleteUser
      summary: Delete track from the library
      parameters:
        - name: id
          required: true
          in: path
          description: Track ID
          schema:
            type: string
      responses:
        '204':
          description: Track deleted successfully.
        '400':
          description: Track ID is invalid.
        '404':
          description: Track not found.
      tags: *ref_2
  /album:
    get:
      operationId: AlbumController_getAlbums
      summary: Change track data
      parameters: []
      responses:
        '200':
          description: Albums returned successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AlbumClass'
      tags: &ref_3
        - Album instance
    post:
      operationId: AlbumController_createAlbum
      summary: Create a new album
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlbumDto'
      responses:
        '200':
          description: Album created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumClass'
        '400':
          description: Body is invalid.
      tags: *ref_3
  /album/{id}:
    get:
      operationId: AlbumController_getAlbumById
      summary: Get album by ID
      parameters:
        - name: id
          required: true
          in: path
          description: Album ID
          schema:
            type: string
      responses:
        '200':
          description: Album found and returned successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumClass'
        '400':
          description: Album ID is invalid.
        '404':
          description: Album not found.
      tags: *ref_3
    put:
      operationId: AlbumController_changeAlbum
      summary: Change album data
      parameters:
        - name: id
          required: true
          in: path
          description: Track ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlbumDto'
      responses:
        '200':
          description: Album changed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumClass'
        '400':
          description: Album ID is invalid.
        '404':
          description: Album not found.
      tags: *ref_3
    delete:
      operationId: AlbumController_deleteUser
      summary: Delete album
      parameters:
        - name: id
          required: true
          in: path
          description: Track ID
          schema:
            type: string
      responses:
        '204':
          description: Album deleted successfully.
        '400':
          description: Album ID is invalid.
        '404':
          description: Album not found.
      tags: *ref_3
  /favs:
    get:
      operationId: FavoritesController_getFavorites
      summary: Get favorites
      parameters: []
      responses:
        '200':
          description: Favorites returned successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoritesResponseClass'
      tags: &ref_4
        - Favorites instance
  /favs/{instance}/{id}:
    post:
      operationId: FavoritesController_addToFavorites
      summary: Add track/artist/album to favorites
      parameters:
        - name: instance
          required: true
          in: path
          description: Type of entity to add to favorites
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: ID
          schema:
            type: string
      responses:
        '201':
          description: Entity added to favorites successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoritesResponseClass'
        '400':
          description: Entity ID is invalid.
        '422':
          description: Entity to add was not found.
      tags: *ref_4
    delete:
      operationId: FavoritesController_deleteFromFavorites
      summary: Remove track/artist/album from favorites
      parameters:
        - name: instance
          required: true
          in: path
          description: Type of entity to remove from favorites
          schema:
            type: string
        - name: id
          required: true
          in: path
          description: Entity ID
          schema:
            type: string
      responses:
        '204':
          description: Entity removed from favorites successfully.
        '400':
          description: Entity ID is invalid.
        '404':
          description: Entity is not in favorites.
      tags: *ref_4
info:
  title: Home music library API Documentation
  description: API documentation for the Home music library application
  version: '1.0'
  contact: {}
tags: []
servers: []
components:
  schemas:
    ReturnedUserClass:
      type: object
      properties:
        id:
          type: string
          description: The ID of the user
          format: uuid
          example: 506da2d4-2f9d-4e45-bf22-d654c17f0008
        login:
          type: string
          description: The login of the user
          example: testUser
        version:
          type: number
          description: The version of the user's account
          example: 1
        createAt:
          type: number
          description: Date of the account creation.
          example: 1655000000
        updateAt:
          type: number
          description: Date of the account modifying.
          example: 1655000000
      required:
        - id
        - login
        - version
        - createAt
        - updateAt
    CreateUserDto:
      type: object
      properties:
        login:
          type: string
          description: The login of the user
          example: testUser
        password:
          type: string
          description: The password of the user
          example: password123
      required:
        - login
        - password
    UpdatePasswordDto:
      type: object
      properties:
        oldPassword:
          type: string
          description: The old user's password
          example: passwordOld
        newPassword:
          type: string
          description: The new user's password
          example: passwordNew
      required:
        - oldPassword
        - newPassword
    ArtistClass:
      type: object
      properties:
        id:
          type: string
          description: The ID of the artist
          example: 506da2d4-2f9d-4e45-bf22-d654c17f0008
        name:
          type: string
          description: The name of the artist
          example: testArtist
        grammy:
          type: boolean
          description: Does the artist have Grammy
          example: true
      required:
        - id
        - name
        - grammy
    CreateArtistDto:
      type: object
      properties:
        name:
          type: string
          description: The name of the artist
          example: testArtist
        grammy:
          type: boolean
          description: Does the artist have Grammy
          example: true
      required:
        - name
        - grammy
    TrackClass:
      type: object
      properties:
        id:
          type: string
          description: ID of the track
          format: uuid
          example: 506da2d4-2f9d-4e45-bf22-d654c17f0008
        name:
          type: string
          description: The name of the track
          example: testTrack
        artistId:
          type: string
          description: ID of the artist
          format: uuid
          example: 506da2d4-2f9d-4e45-bf22-d654c17f0008
        albumId:
          type: string
          description: ID of the album
          format: uuid
          example: 506da2d4-2f9d-4e45-bf22-d654c17f0008
        duration:
          type: number
          description: Duration of the track in seconds
          example: 356
      required:
        - id
        - name
        - artistId
        - albumId
        - duration
    CreateTrackDto:
      type: object
      properties:
        name:
          type: string
          description: The name of the track
          example: testTrack
        artistId:
          type: string
          description: ID of the artist
          example: 506da2d4-2f9d-4e45-bf22-d654c17f0008
        albumId:
          type: string
          description: ID of the album
          example: 506da2d4-2f9d-4e45-bf22-d654c17f0008
        duration:
          type: number
          description: Duration of the track in seconds
          example: 356
      required:
        - name
        - artistId
        - albumId
        - duration
    AlbumClass:
      type: object
      properties:
        id:
          type: string
          description: Album ID
          format: uuid
          example: 506da2d4-2f9d-4e45-bf22-d654c17f0008
        name:
          type: string
          description: The name of the album
          example: testAlbum
        year:
          type: number
          description: Album year
          example: 1998
        artistId:
          type: string
          description: The ID of the artist
          example: 506da2d4-2f9d-4e45-bf22-d654c17f0008
      required:
        - id
        - name
        - year
        - artistId
    CreateAlbumDto:
      type: object
      properties:
        name:
          type: string
          description: The name of the album
          example: testAlbum
        artistId:
          type: string
          description: The ID of the artist
          example: 506da2d4-2f9d-4e45-bf22-d654c17f0008
        year:
          type: number
          description: Album year
          example: 1998
      required:
        - name
        - artistId
        - year
    FavoritesResponseClass:
      type: object
      properties:
        artists:
          type: array
          items:
            $ref: '#/components/schemas/ArtistClass'
        albums:
          type: array
          items:
            $ref: '#/components/schemas/AlbumClass'
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/TrackClass'
      required:
        - artists
        - albums
        - tracks
