// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  //url      = env("DATABASE_MIGRATE_URL")
}

model User {
  id String @id @default(uuid())
  login String
  password String
  version Int @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Artist {
  id String @id @default(uuid())
  name String
  grammy Boolean
  albums Album[]
  tracks Track[]
  //favorites Favorites[] @relation("ArtistFav")
}

model Album {
  id String @id @default(uuid())
  name String
  year Int
  artistId String?
  artist Artist? @relation(fields: [artistId], references: [id], onDelete: SetNull)
  tracks Track[]
  //favorites Favorites[] @relation("AlbumFav")
}

model Track {
  id String @id @default(uuid())
  name String
  artistId String?
  artist Artist? @relation(fields: [artistId], references: [id], onDelete: SetNull)
  albumId String?
  album Album? @relation(fields: [albumId], references: [id], onDelete: SetNull)
  duration Int
  //favorites Favorites[] @relation("TrackFav")
}

//model Favorites {
  //id String @id @default(uuid())
  //type String 
  //trackId String? 
  //albumId String?
  //artistId String?
  //track Track? @relation("TrackFav", fields: [trackId], references: [id], onDelete: Cascade, map: "Track_Favorites_fk")
//  album Album? @relation("AlbumFav", fields: [albumId], references: [id], onDelete: Cascade, map: "Album_Favorites_fk")
  //artist Artist? @relation("ArtistFav", fields: [artistId], references: [id], onDelete: Cascade, map: "Artist_Favorites_fk")
//}

model Favorites {
  id String @default(uuid())
  type String 
  favId String @id
}